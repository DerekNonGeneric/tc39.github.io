- title: Legacy RegExp features in JavaScript
  id: proposal-regexp-legacy-features
  has_specification: false
  description: This is a specification draft for the legacy (deprecated) RegExp features in JavaScript, i.e., static properties of the constructor like RegExp.$1 as well as the RegExp.prototype.compile method.
  authors:
    - Claude Pache
  champions:
    - Mark Miller
    - Claude Pache
  tests:
    - https://github.com/tc39/test262/issues/1165
  presented:
    - date: May 2017
      url: https://github.com/tc39/notes/blob/master/meetings/2017-05/may-25.md#15ia-regexp-legacy-features-for-stage-3

- title: Private instance methods and accessors
  id: proposal-private-methods
  has_specification: true
  description: Keeping state and behavior private to a class lets library authors present a clear, stable interface, while changing their code over time behind the scenes.
  authors:
    - Daniel Ehrenberg
  champions:
    - Daniel Ehrenberg
    - Kevin Gibbons
  tests:
    - https://github.com/tc39/test262/issues/1343
  presented:
    - date: January 2019
      url: https://github.com/tc39/notes/blob/master/meetings/2019-01/jan-30.md#private-fields-and-methods-refresher
  example: >
    class Counter extends HTMLElement {
      #xValue = 0;

      get #x() { return #xValue; }
      set #x(value) {
        this.#xValue = value;
        window.requestAnimationFrame(this.#render.bind(this));
      }

      #clicked() {
        this.#x++;
      }

      constructor() {
        super();
        this.onclick = this.#clicked.bind(this);
      }

      connectedCallback() { this.#render(); }

      #render() {
        this.textContent = this.#x.toString();
      }
    }
    window.customElements.define('num-counter', Counter);

- title: Class Public Instance Fields & Private Instance Fields
  id: proposal-class-fields
  has_specification: true
  description: This proposes a combined vision for public fields and private fields, drawing on the earlier Orthogonal Classes and Class Evaluation Order proposals.
  authors:
    - Daniel Ehrenberg
    - Kevin Gibbons
  champions:
    - Daniel Ehrenberg
    - Jeff Morrison
    - Kevin Smith
    - Kevin Gibbons
  tests:
    - https://github.com/tc39/test262/issues/1161
  example: >
    class Foo {
        instancePropertyBar = 0;
        static staticPropertyBar = 0;
        #privatePropertyBar = 0;
        static #privatePropertyBar = 0;

        set foo(value) { console.log(value); }
    }
  presented:
    - date: January 2019
      url: https://github.com/tc39/notes/blob/master/meetings/2019-01/jan-30.md#private-fields-and-methods-refresher

- title: Static class fields and private static methods
  id: proposal-static-class-features
  has_specification: true
  description: This proposal adds Static public fields, Static private methods and Static private fields
  authors:
    - Daniel Ehrenberg
    - Kevin Gibbons
    - Jeff Morrison
    - Kevin Smith
  champions:
    - Shu-Yu Guo
    - Daniel Ehrenberg
  presented:
    - date: January 2019
      url: https://github.com/tc39/notes/blob/master/meetings/2019-01/jan-30.md#private-fields-and-methods-refresher
  example: >
    class ColorFinder {
      static #red = "#ff0000";

      static #blue = "#00ff00";

      static #green = "#0000ff";

      // ^ static class fields

      static white = "white";

      // ^ static public field.

      static colorName(name) {
        switch (name) {
          case "red": return ColorFinder.#red;
          case "blue": return ColorFinder.#blue;
          case "green": return ColorFinder.#green;
          default: throw new RangeError("unknown color");
        }
      }

      // Static method ^

      static #setColor(name) {

      }
      // ^ Static private method
    }

- title: Hashbang Grammar
  id: proposal-hashbang
  has_specification: true
  description: This proposal is to match de-facto usage in some CLI JS hosts that allow for Shebangs / Hashbang. Such hosts strip the hashbang in order to generate valid JS source texts before passing to JS engines currently. This would unify and standardize how that is done..
  authors:
    - Bradley Farias
  champions:
    - Bradley Farias
  tests:
    - https://github.com/tc39/test262/pull/2065
  example: >
    #!/usr/bin/env node

    // in the Script Goal

    'use strict';

    console.log(1);


    /****** begining of another script ********/

    #!/usr/bin/env node

    // in the Module Goal

    export {};

    console.log(1);

  presented:
    - date: November 2018
      url: https://github.com/tc39/notes/blob/master/meetings/2018-11/nov-28.md#hash-bang-grammar


- title: Top level await
  id: proposal-top-level-await
  has_specification: true
  description: Top-level await lets us rely on the module system itself to handle all of these promises, and make sure that things are well-coordinated.
  authors:
    - Myles Borins
  champions:
    - Myles Borins
  example: >
    // awaiting.mjs

    import { process } from "./some-module.mjs";

    const dynamic = import(computedModuleSpecifier);

    const data = fetch(url);

    export const output = process((await dynamic).default, await data);

    // usage.mjs

    import { output } from "./awaiting.mjs";

    export function outputPlusValue(value) { return output + value }

    console.log(outputPlusValue(100));

    setTimeout(() => console.log(outputPlusValue(100), 1000);

  presented:
    - date: June 2019
      url: https://github.com/tc39/notes/blob/master/meetings/2019-06/june-6.md#top-level-await-for-stage-3

- title: RegExp Match Indices
  id: proposal-regexp-match-indices
  has_specification: true
  description: ECMAScript RegExp Match Indicies provide additional information about the start and end indices of captured substrings relative to the start of the input string.
  authors:
    - Ron Buckton
  champions:
    - Ron Buckton
  example: >
    const re1 = /a+(?&lt;Z&gt;z)?/;

    // indices are relative to start of the input string:

    const s1 = "xaaaz";

    const m1 = re1.exec(s1);

    m1.indices[0][0] === 1;

    m1.indices[0][1] === 5;

    s1.slice(...m1.indices[0]) === "aaaz";


    m1.indices[1][0] === 4;

    m1.indices[1][1] === 5;

    s1.slice(...m1.indices[1]) === "z";


    m1.indices.groups["Z"][0] === 4;

    m1.indices.groups["Z"][1] === 5;

    s1.slice(...m1.indices.groups["Z"]) === "z";


    // capture groups that are not matched return `undefined`:

    const m2 = re1.exec("xaaay");

    m2.indices[1] === undefined;

    m2.indices.groups["Z"] === undefined;

  presented:
    - date: July 2019

- title: Atomics.waitAsync
  id: proposal-atomics-wait-async
  has_specification: true
  description: A proposal for an "asynchronous atomic wait" for ECMAScript, primarily for use in agents that are not allowed to block.
  authors:
    - Lars Hansen
  champions:
    - Shu-Yu Guo
    - Lars Hansen
  example: >
    var sab = new SharedArrayBuffer(4096);

    var ia = new Int32Array(sab);

    ia[37] = 0x1337;

    test1();


    function test1() {

      Atomics.waitAsync(ia, 37, 0x1337, 1000).then(function (r) { log("Resolved: " + r); test2(); });

    }


    var code = `

    var ia = null;

    onmessage = function (ev) {

      if (!ia) {

        postMessage("Aux worker is running");

        ia = new Int32Array(ev.data);

      }

      postMessage("Aux worker is sleeping for a little bit");

      setTimeout(function () { postMessage("Aux worker is waking"); Atomics.notify(ia, 37); }, 1000);

    }`;


    function test2() {

      var w = new Worker("data:application/javascript," + encodeURIComponent(code));

      w.onmessage = function (ev) { log(ev.data) };

      w.postMessage(sab);

      Atomics.waitAsync(ia, 37, 0x1337).then(function (r) { log("Resolved: " + r); test3(w); });

    }


    function test3(w) {

      w.postMessage(false);

      Atomics.waitAsync(ia, 37, 0x1337).then(function (r) { log("Resolved 1: " + r); });

      Atomics.waitAsync(ia, 37, 0x1337).then(function (r) { log("Resolved 2: " + r); });

      Atomics.waitAsync(ia, 37, 0x1337).then(function (r) { log("Resolved 3: " + r); });

    }


    function log(msg) {

      document.getElementById("scrool").innerHTML += String(msg) + "\n";

    }

  presented:
    - date: December 2019
      url: https://github.com/tc39/notes/blob/master/meetings/2019-12/december-4.md#atomicswaitasync-for-stage-3


